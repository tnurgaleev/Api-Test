<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Trans Api Test" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="duration_second" elementType="Argument">
            <stringProp name="Argument.name">duration_second</stringProp>
            <stringProp name="Argument.value">${__P(duration,60)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="load_msg_sec" elementType="Argument">
            <stringProp name="Argument.name">load_msg_sec</stringProp>
            <stringProp name="Argument.value">${__P(load,20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MyCustomTimeStart" elementType="Argument">
            <stringProp name="Argument.name">MyCustomTimeStart</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MyCustomTimeEnd" elementType="Argument">
            <stringProp name="Argument.name">MyCustomTimeEnd</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userID" elementType="Argument">
            <stringProp name="Argument.name">userID</stringProp>
            <stringProp name="Argument.value">12184</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dateArrival" elementType="Argument">
            <stringProp name="Argument.name">dateArrival</stringProp>
            <stringProp name="Argument.value">2018-05-15 11:30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dateDeparture" elementType="Argument">
            <stringProp name="Argument.name">dateDeparture</stringProp>
            <stringProp name="Argument.value">2018-05-15 15:30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">100</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname=" Response Times Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Error" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Success" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="ResultCollector.success_only_logging">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">test.iwayex.com</stringProp>
        <stringProp name="HTTPSampler.port">80</stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Multiple_Old_Api_Requests" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPrice_GetPrice_GetPrice" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;GetPrice&quot;,&#xd;
    &quot;params&quot;: {&#xd;
      &quot;userID&quot;: ${userID},&#xd;
      &quot;startPlaceAuditID&quot;: 1199,&#xd;
      &quot;finishPlaceAuditID&quot;: 135&#xd;
    },&#xd;
    &quot;id&quot;: &quot;a3334405-b1ab-4e1d-8bf2-ab58057df334&quot;&#xd;
  },&#xd;
  {&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;GetPrice&quot;,&#xd;
    &quot;params&quot;: {&#xd;
      &quot;userID&quot;: ${userID},&#xd;
      &quot;startPlaceAuditID&quot;: 863,&#xd;
      &quot;finishPlaceAuditID&quot;: 1208&#xd;
    },&#xd;
    &quot;id&quot;: &quot;8c92eb93-5ede-43b8-a91c-1e6b3ac485df&quot;&#xd;
  },&#xd;
  {&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;GetPrice&quot;,&#xd;
    &quot;params&quot;: {&#xd;
      &quot;userID&quot;: ${userID},&#xd;
      &quot;startPlaceAuditID&quot;: 864,&#xd;
      &quot;finishPlaceAuditID&quot;: 1201&#xd;
    },&#xd;
    &quot;id&quot;: &quot;8c92eb93-5ede-43b8-a91c-1e6b3ac485df&quot;&#xd;
  }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="AuditID_GetPrice" enabled="true">
            <stringProp name="VAR">AuditID_GetPrice</stringProp>
            <stringProp name="JSONPATH">$..AuditID</stringProp>
            <stringProp name="DEFAULT">AuditID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_AuditID_GetPrice" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int i, j;
int lngth = Integer.parseInt(vars.get(&quot;AuditID_GetPrice_matchNr&quot;));
 
//Проверка
for (i = 0; i &lt; lngth; i++)
for (j = 0; j &lt; lngth; j++) 
 if (i != j)
 if (Integer.valueOf(vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())) == Integer.valueOf(vars.get(&quot;AuditID_GetPrice_&quot;+(j+1).toString()))){
 AssertionResult.setFailureMessage(&quot;Fail: [index 1: &quot; + N.toString() +&quot;] [index 2: &quot;+i.toString()+&quot;] [value 1: &quot;+vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())+&quot;][value 2: &quot;+vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())+&quot;]&quot;);
 AssertionResult.setFailure(true);
}
/*int[] AuditID_Price;
int N, i;

String lngth_str = vars.get(&quot;AuditID_GetPrice_matchNr&quot;);

int lngth = Integer.valueOf(lngth_str);
//OUT.println(lngth.toString());
//OUT.println(lngth);

AuditID_Price = new int[lngth];

//записываем числа из массива
for (i = 0; i &lt; lngth; i++) {
 AuditID_Price[i] = Integer.valueOf(vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString()));
  //OUT.println(i.toString());
 }
 
 //OUT.println(&quot;Done&quot;);	
log.info (&quot;The example answer is &quot; + AuditID_Price);	

//Проверка
for (N = 0; N &lt; lngth; N++){
	for (i = 0; i &lt; lngth; i++){ 
		if (i!=N){
	       if (AuditID_Price[N] == AuditID_Price[i]){
		  AssertionResult.setFailureMessage(&quot;Fail: [index 1: &quot;  +N.toString() +&quot;] [index 2:&quot;  +i.toString()+&quot;] [value: &quot; +   AuditID_Price[N].toString()+&quot;][value: &quot; +AuditID_Price[i].toString()+&quot;]&quot;);
	       AssertionResult.setFailure(true);
	break;
			}
		}
	}
}	*/
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">false</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPrice_GetTrip" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;GetPrice&quot;,&#xd;
    &quot;params&quot;: {&#xd;
      &quot;userID&quot;: ${userID},&#xd;
      &quot;startPlaceAuditID&quot;: 1199,&#xd;
      &quot;finishPlaceAuditID&quot;: 135&#xd;
    },&#xd;
    &quot;id&quot;: &quot;a3334405-b1ab-4e1d-8bf2-ab58057df334&quot;&#xd;
  },&#xd;
  &#xd;
  {  &#xd;
   &quot;jsonrpc&quot;:&quot;2.0&quot;,&#xd;
   &quot;method&quot;:&quot;GetTrip&quot;,&#xd;
   &quot;params&quot;:{  &#xd;
      &quot;userID&quot;:${userID},&#xd;
      &quot;password&quot;:&quot;idu183&quot;,&#xd;
      &quot;page&quot;:2&#xd;
      },&#xd;
   &quot;id&quot;:1&#xd;
  }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="AuditID_GetPrice" enabled="true">
            <stringProp name="VAR">AuditID_GetPrice</stringProp>
            <stringProp name="JSONPATH">$..AuditID</stringProp>
            <stringProp name="DEFAULT">AuditID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Repetition Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int i, j;
int lngth = Integer.parseInt(vars.get(&quot;AuditID_GetPrice_matchNr&quot;));
 
//Проверка
for (i = 0; i &lt; lngth; i++)
for (j = 0; j &lt; lngth; j++) 
 if (i != j)
 if (Integer.valueOf(vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())) == Integer.valueOf(vars.get(&quot;AuditID_GetPrice_&quot;+(j+1).toString()))){
 AssertionResult.setFailureMessage(&quot;Fail: [index 1: &quot; + N.toString() +&quot;] [index 2: &quot;+i.toString()+&quot;] [value 1: &quot;+vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())+&quot;][value 2: &quot;+vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())+&quot;]&quot;);
 AssertionResult.setFailure(true);
}
/*int[] AuditID_Price;
int N, i;

String lngth_str = vars.get(&quot;AuditID_GetPrice_matchNr&quot;);

int lngth = Integer.valueOf(lngth_str);
//OUT.println(lngth.toString());
//OUT.println(lngth);

AuditID_Price = new int[lngth];

//записываем числа из массива
for (i = 0; i &lt; lngth; i++) {
 AuditID_Price[i] = Integer.valueOf(vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString()));
  //OUT.println(i.toString());
 }
 
 //OUT.println(&quot;Done&quot;);	
log.info (&quot;The example answer is &quot; + AuditID_Price);	

//Проверка
for (N = 0; N &lt; lngth; N++){
	for (i = 0; i &lt; lngth; i++){ 
		if (i!=N){
	       if (AuditID_Price[N] == AuditID_Price[i]){
		  AssertionResult.setFailureMessage(&quot;Fail: [index 1: &quot;  +N.toString() +&quot;] [index 2:&quot;  +i.toString()+&quot;] [value: &quot; +   AuditID_Price[N].toString()+&quot;][value: &quot; +AuditID_Price[i].toString()+&quot;]&quot;);
	       AssertionResult.setFailure(true);
	break;
			}
		}
	}
}	*/
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Get price Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;AuditID&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString == null){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Get Trip Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int i, j;
int lngth = Integer.parseInt(vars.get(&quot;AuditID_GetPrice_matchNr&quot;));
 
//Проверка
for (i = 0; i &lt; lngth; i++)
for (j = 0; j &lt; lngth; j++) 
 if (i != j)
 if (Integer.valueOf(vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())) == Integer.valueOf(vars.get(&quot;AuditID_GetPrice_&quot;+(j+1).toString()))){
 AssertionResult.setFailureMessage(&quot;Fail: [index 1: &quot; + N.toString() +&quot;] [index 2: &quot;+i.toString()+&quot;] [value 1: &quot;+vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())+&quot;][value 2: &quot;+vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())+&quot;]&quot;);
 AssertionResult.setFailure(true);
}
/*int[] AuditID_Price;
int N, i;

String lngth_str = vars.get(&quot;AuditID_GetPrice_matchNr&quot;);

int lngth = Integer.valueOf(lngth_str);
//OUT.println(lngth.toString());
//OUT.println(lngth);

AuditID_Price = new int[lngth];

//записываем числа из массива
for (i = 0; i &lt; lngth; i++) {
 AuditID_Price[i] = Integer.valueOf(vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString()));
  //OUT.println(i.toString());
 }
 
 //OUT.println(&quot;Done&quot;);	
log.info (&quot;The example answer is &quot; + AuditID_Price);	

//Проверка
for (N = 0; N &lt; lngth; N++){
	for (i = 0; i &lt; lngth; i++){ 
		if (i!=N){
	       if (AuditID_Price[N] == AuditID_Price[i]){
		  AssertionResult.setFailureMessage(&quot;Fail: [index 1: &quot;  +N.toString() +&quot;] [index 2:&quot;  +i.toString()+&quot;] [value: &quot; +   AuditID_Price[N].toString()+&quot;][value: &quot; +AuditID_Price[i].toString()+&quot;]&quot;);
	       AssertionResult.setFailure(true);
	break;
			}
		}
	}
}	*/
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">false</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPrice_GetTrip_AddTrip" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;GetPrice&quot;,&#xd;
    &quot;params&quot;: {&#xd;
      &quot;userID&quot;: ${userID},&#xd;
      &quot;currency&quot;: &quot;RUB&quot;,&#xd;
      &quot;lang&quot;: &quot;ru&quot;,&#xd;
      &quot;startPlaceAuditID&quot;: 1199,&#xd;
      &quot;finishPlaceAuditID&quot;: 135&#xd;
    },&#xd;
    &quot;id&quot;: &quot;a3334405-b1ab-4e1d-8bf2-ab58057df334&quot;&#xd;
  },&#xd;
  &#xd;
  {  &#xd;
   &quot;jsonrpc&quot;:&quot;2.0&quot;,&#xd;
   &quot;method&quot;:&quot;GetTrip&quot;,&#xd;
   &quot;params&quot;:{  &#xd;
      &quot;userID&quot;:${userID},&#xd;
      &quot;password&quot;:&quot;idu183&quot;,&#xd;
      &quot;page&quot;:2&#xd;
      },&#xd;
   &quot;id&quot;:1&#xd;
  },&#xd;
  {&quot;jsonrpc&quot;:&quot;2.0&quot;,&#xd;
   &quot;method&quot;:&quot;AddTrip&quot;,&#xd;
   &quot;params&quot;:{&#xd;
      &quot;priceID&quot;:8327,&#xd;
      &quot;Price&quot;:12000,&#xd;
      &quot;dateArrival&quot;: &quot;2018-02-15 11:30&quot;,&#xd;
      &quot;dateDeparture&quot;: &quot;2018-02-15 15:30&quot;,&#xd;
      &quot;locationAddress&quot;:&quot;Petrovka 13&quot;,&#xd;
      &quot;passengers&quot;:[&#xd;
          {&#xd;
              &quot;phone&quot;:8911111111,&#xd;
              &quot;email&quot;:&quot;mail121212@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Client Name&quot;&#xd;
         },&#xd;
          {&#xd;
              &quot;phone&quot;:23554522212,&#xd;
              &quot;email&quot;:&quot;passenger@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Passenger Name&quot;&#xd;
          }&#xd;
      ],&#xd;
      &quot;userID&quot;:${userID},&#xd;
      &quot;departureNumber&quot;:&quot;Moscow-Berlin&quot;,&#xd;
      &quot;lang&quot;: &quot;ru&quot;, &#xd;
      &quot;currency&quot;: &quot;RUB&quot;,&#xd;
      &quot;sendParams&quot;:{&#xd;
          &quot;SendClientVoucher&quot;:true,&#xd;
          &quot;SendAdminVoucher&quot;:true,&#xd;
          &quot;SendClientDoc&quot;:false,&#xd;
          &quot;SendAdminDoc&quot;:true&#xd;
      }&#xd;
  },&#xd;
&quot;id&quot;:1}&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="AuditID_GetPrice" enabled="true">
            <stringProp name="VAR">AuditID_GetPrice</stringProp>
            <stringProp name="JSONPATH">$..AuditID</stringProp>
            <stringProp name="DEFAULT">AuditID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_AuditID_GetPrice" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int i, j;
int lngth = Integer.parseInt(vars.get(&quot;AuditID_GetPrice_matchNr&quot;));
 
//Проверка
for (i = 0; i &lt; lngth; i++)
for (j = 0; j &lt; lngth; j++) 
 if (i != j)
 if (Integer.valueOf(vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())) == Integer.valueOf(vars.get(&quot;AuditID_GetPrice_&quot;+(j+1).toString()))){
 AssertionResult.setFailureMessage(&quot;Fail: [index 1: &quot; + N.toString() +&quot;] [index 2: &quot;+i.toString()+&quot;] [value 1: &quot;+vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())+&quot;][value 2: &quot;+vars.get(&quot;AuditID_GetPrice_&quot;+(i+1).toString())+&quot;]&quot;);
 AssertionResult.setFailure(true);
}

	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">false</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddTrip_AddTrip_Rent" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
{&quot;jsonrpc&quot;:&quot;2.0&quot;,&#xd;
 &quot;method&quot;:&quot;AddTrip&quot;,&#xd;
 &quot;params&quot;:{&#xd;
      &quot;priceID&quot;:8327,&#xd;
      &quot;Price&quot;:12000,&#xd;
      &quot;dateArrival&quot;: &quot;${dateArrival}&quot;,&#xd;
      &quot;dateDeparture&quot;: &quot;${dateDeparture}&quot;,&#xd;
      &quot;locationAddress&quot;:&quot;Petrovka 13&quot;,&#xd;
      &quot;passengers&quot;:[&#xd;
          {&#xd;
              &quot;phone&quot;:8911111111,&#xd;
              &quot;email&quot;:&quot;mail121212@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Client Name&quot;&#xd;
         },&#xd;
          {&#xd;
              &quot;phone&quot;:23554522212,&#xd;
              &quot;email&quot;:&quot;passenger@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Passenger Name&quot;&#xd;
          }&#xd;
      ],&#xd;
      &quot;userID&quot;:12184,&#xd;
      &quot;departureNumber&quot;:&quot;Moscow-Berlin&quot;,&#xd;
      &quot;lang&quot;: &quot;ru&quot;, &#xd;
      &quot;currency&quot;: &quot;RUB&quot;,&#xd;
      &quot;sendParams&quot;:{&#xd;
          &quot;SendClientVoucher&quot;:true,&#xd;
          &quot;SendAdminVoucher&quot;:true,&#xd;
          &quot;SendClientDoc&quot;:false,&#xd;
          &quot;SendAdminDoc&quot;:true&#xd;
      }&#xd;
  },&#xd;
&quot;id&quot;:1},&#xd;
{&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;AddTrip&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;priceID&quot;: 12495,&#xd;
    &quot;duration&quot;: 24000,&#xd;
    &quot;startID&quot;: 9,&#xd;
    &quot;dateArrival&quot;: &quot;${dateArrival}&quot;,&#xd;
    &quot;dateDeparture&quot;: null,&#xd;
    &quot;locationAddress&quot;: &quot;улица Ленина, 5&quot;,&#xd;
    &quot;passengersNumber&quot;: 1,&#xd;
    &quot;notes&quot;: null,&#xd;
    &quot;table&quot;: &quot;Jon Snow&quot;,&#xd;
    &quot;locationTerminal&quot;: null,&#xd;
    &quot;destinationAddress&quot;: null,&#xd;
    &quot;passengers&quot;: [&#xd;
      {&#xd;
        &quot;name&quot;: &quot;Jon Snow&quot;,&#xd;
        &quot;phone&quot;: &quot;8913111111&quot;,&#xd;
        &quot;email&quot;: &quot;nurgaleev@iwayex.com&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;userID&quot;: 12184,&#xd;
    &quot;subaddress&quot;: null,&#xd;
    &quot;departureNumber&quot;: null,&#xd;
    &quot;arrivalNumber&quot;: null,&#xd;
    &quot;arrivalWagon&quot;: null,&#xd;
    &quot;lang&quot;: &quot;ru&quot;,&#xd;
    &quot;currency&quot;: &quot;RUB&quot;&#xd;
  },&#xd;
  &quot;id&quot;: 1&#xd;
}&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="OrderID_AddTrip_AddTrip_Rent" enabled="true">
            <stringProp name="VAR">OrderID_AddTrip_AddTrip_Rent</stringProp>
            <stringProp name="JSONPATH">$..OrderID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_PriceID" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">int i, j;
int lngth = Integer.parseInt(vars.get(&quot;OrderID_AddTrip_AddTrip_Rent_matchNr&quot;));
 
//Проверка
for (i = 0; i &lt; lngth; i++)
for (j = 0; j &lt; lngth; j++) 
 if (i != j)
 if (Integer.valueOf(vars.get(&quot;OrderID_AddTrip_AddTrip_Rent_&quot;+(i+1).toString())) == Integer.valueOf(vars.get(&quot;OrderID_AddTrip_AddTrip_Rent_&quot;+(j+1).toString()))){
 AssertionResult.setFailureMessage(&quot;Fail: [index 1: &quot; + N.toString() +&quot;] [index 2: &quot;+i.toString()+&quot;] [value 1: &quot;+vars.get(&quot;OrderID_AddTrip_AddTrip_Rent_&quot;+(i+1).toString())+&quot;][value 2: &quot;+vars.get(&quot;OrderID_AddTrip_AddTrip_Rent_&quot;+(i+1).toString())+&quot;]&quot;);
 AssertionResult.setFailure(true);
}
</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="transactionID_rent" enabled="true">
            <stringProp name="VAR">transactionID_rent</stringProp>
            <stringProp name="JSONPATH">$..Transaction</stringProp>
            <stringProp name="DEFAULT">transaction_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="OrderID_Rent" enabled="false">
            <stringProp name="VAR">OrderID_rent</stringProp>
            <stringProp name="JSONPATH">$..OrderID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Autofind_Autofind" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
{&quot;jsonrpc&quot;:&quot;2.0&quot;,&#xd;
 &quot;method&quot;:&quot;AutoFind&quot;,&#xd;
   &quot;params&quot;:{&#xd;
       &quot;term&quot;:&quot;Novos&quot;,&#xd;
       &quot;lang&quot;:&quot;ru&quot;&#xd;
   },&#xd;
&quot;id&quot;:1&#xd;
},&#xd;
{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;AutoFind&quot;,&#xd;
   &quot;params&quot;:{&#xd;
       &quot;term&quot;:&quot;Mosc&quot;,&#xd;
       &quot;lang&quot;:&quot;ru&quot;&#xd;
   },&#xd;
&quot;id&quot;:1}&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Country_GetSettingUser" enabled="true">
            <stringProp name="VAR">Country_GetSettingUser</stringProp>
            <stringProp name="JSONPATH">$..Country</stringProp>
            <stringProp name="DEFAULT">Country_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;Country_GetSettingUser_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;RUSSIA&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
vars.put (&quot;CheckTransaction&quot;, jsonString);	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Old_Api_Test" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514523107000</longProp>
        <longProp name="ThreadGroup.end_time">1514523107000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate_MyCustomTimeStart_Function" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">var startDate = new Date();
startDate.setDate(1); 
startDate.setMonth(0); 
startDate.setYear(2018);
startDate.setHours(0);
startDate.setMinutes(0); 
var startDateTime = startDate.getTime(); 

var endDate = new Date(); 
endDate.setDate(31);
endDate.setMonth(6); 
endDate.setYear(2018);
endDate.setHours(24); 
endDate.setMinutes(60);
var endDateTime = endDate.getTime();

var randomDate = new Date();
var randomDateTime = startDateTime+Math.random()*(endDateTime-startDateTime); randomDate.setTime(randomDateTime); 
var rndDate = randomDate.getDate();
var rndMonth = randomDate.getMonth() + 1;
var rndYear = randomDate.getFullYear(); 
var rndHours = randomDate.getHours(); 
var rndMinutes = randomDate.getMinutes();

if (rndDate.toString().length == 1) rndDate = &quot;0&quot; + rndDate;
if (rndMonth.toString().length == 1) rndMonth = &quot;0&quot; + rndMonth; 
if (rndMinutes.toString().length == 1) rndMinutes = &quot;0&quot; + rndMinutes; 
if (rndHours.toString().length == 1) rndHours = &quot;0&quot; + rndHours;

rndTime = rndYear + &quot;-&quot; + rndMonth + &quot;-&quot; + rndDate + &quot; &quot; + rndHours + &quot;:&quot; + rndMinutes; 

vars.put(&quot;MyCustomTimeStart&quot;, rndTime);

</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate_MyCustomTimeEnd_Function" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">var startDate = new Date();
startDate.setDate(23); 
startDate.setMonth(1); 
startDate.setYear(2018);
startDate.setHours(0);
startDate.setMinutes(0); 
var startDateTime = startDate.getTime(); 

var endDate = new Date(); 
endDate.setDate(31);
endDate.setMonth(7); 
endDate.setYear(2018);
endDate.setHours(24); 
endDate.setMinutes(60);
var endDateTime = endDate.getTime();

var randomDate = new Date();
var randomDateTime = startDateTime+Math.random()*(endDateTime-startDateTime); randomDate.setTime(randomDateTime); 
var rndDate = randomDate.getDate();
var rndMonth = randomDate.getMonth() + 1;
var rndYear = randomDate.getFullYear(); 
var rndHours = randomDate.getHours(); 
var rndMinutes = randomDate.getMinutes();

if (rndDate.toString().length == 1) rndDate = &quot;0&quot; + rndDate;
if (rndMonth.toString().length == 1) rndMonth = &quot;0&quot; + rndMonth; 
if (rndMinutes.toString().length == 1) rndMinutes = &quot;0&quot; + rndMinutes; 
if (rndHours.toString().length == 1) rndHours = &quot;0&quot; + rndHours;

rndTime = rndYear + &quot;-&quot; + rndMonth + &quot;-&quot; + rndDate + &quot; &quot; + rndHours + &quot;:&quot; + rndMinutes; 

vars.put(&quot;MyCustomTimeEnd&quot;, rndTime);

</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddTrip_Rent" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;AddTrip&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;priceID&quot;: 12495,&#xd;
    &quot;duration&quot;: 24000,&#xd;
    &quot;startID&quot;: 9,&#xd;
    &quot;dateArrival&quot;: &quot;2018-05-13 14:00&quot;,&#xd;
    &quot;dateDeparture&quot;: null,&#xd;
    &quot;locationAddress&quot;: &quot;улица Ленина, 5&quot;,&#xd;
    &quot;passengersNumber&quot;: 1,&#xd;
    &quot;notes&quot;: null,&#xd;
    &quot;table&quot;: &quot;Jon Snow&quot;,&#xd;
    &quot;locationTerminal&quot;: null,&#xd;
    &quot;destinationAddress&quot;: null,&#xd;
    &quot;passengers&quot;: [&#xd;
      {&#xd;
        &quot;name&quot;: &quot;Jon Snow&quot;,&#xd;
        &quot;phone&quot;: &quot;8913111111&quot;,&#xd;
        &quot;email&quot;: &quot;nurgaleev@iwayex.com&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;userID&quot;: 12184,&#xd;
    &quot;subaddress&quot;: null,&#xd;
    &quot;departureNumber&quot;: null,&#xd;
    &quot;arrivalNumber&quot;: null,&#xd;
    &quot;arrivalWagon&quot;: null,&#xd;
    &quot;lang&quot;: &quot;ru&quot;,&#xd;
    &quot;currency&quot;: &quot;RUB&quot;&#xd;
  },&#xd;
  &quot;id&quot;: 1&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Duration" enabled="true">
            <stringProp name="VAR">Duration</stringProp>
            <stringProp name="JSONPATH">$..Duration</stringProp>
            <stringProp name="DEFAULT">Duration_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_PriceID" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;Duration_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;24000&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="transactionID_rent" enabled="true">
            <stringProp name="VAR">transactionID_rent</stringProp>
            <stringProp name="JSONPATH">$..Transaction</stringProp>
            <stringProp name="DEFAULT">transaction_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="OrderID_Rent" enabled="false">
            <stringProp name="VAR">OrderID_rent</stringProp>
            <stringProp name="JSONPATH">$..OrderID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ApproveTrip" enabled="false">
          <stringProp name="ForeachController.inputVal">transactionID_rent</stringProp>
          <stringProp name="ForeachController.returnVal">transactionID_rent</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ApproveTrip" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;ApproveTrip&quot;,&quot;params&quot;:{&#xd;
  	&quot;userID&quot;:12184,&#xd;
  	&quot;password&quot;:&quot;idu183&quot;,&#xd;
	&quot;transaction&quot;:${transactionID_rent}&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/rpc</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="UserID_ApproveTrip" enabled="true">
              <stringProp name="VAR">UserID_ApproveTrip</stringProp>
              <stringProp name="JSONPATH">$..UserID</stringProp>
              <stringProp name="DEFAULT">OrderID_not_found</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String jsonString =  vars.get(&quot;UserID_ApproveTrip_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;12184&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
vars.put (&quot;CheckTransaction&quot;, jsonString);	
	</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="OrderIDEdit" enabled="false">
              <stringProp name="VAR">OrderIDEdit</stringProp>
              <stringProp name="JSONPATH">$..OrderID</stringProp>
              <stringProp name="DEFAULT">OrderID_not_found</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="transactionIDEdit" enabled="false">
              <stringProp name="VAR">transactionIDEdit</stringProp>
              <stringProp name="JSONPATH">$..Transaction</stringProp>
              <stringProp name="DEFAULT">transaction_not_found</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">false</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTrip" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;jsonrpc&quot;:&quot;2.0&quot;,&#xd;
   &quot;method&quot;:&quot;GetTrip&quot;,&#xd;
   &quot;params&quot;:{  &#xd;
      &quot;userID&quot;:12184,&#xd;
      &quot;password&quot;:&quot;idu183&quot;,&#xd;
      &quot;page&quot;:2&#xd;
      },&#xd;
   &quot;id&quot;:1&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="UserID_Get Trip" enabled="true">
            <stringProp name="VAR">UserID_GetTrip</stringProp>
            <stringProp name="JSONPATH">$..UserID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="OrderID_GetTrip" enabled="true">
            <stringProp name="VAR">OrderID_GetTrip</stringProp>
            <stringProp name="JSONPATH">$..OrderID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;UserID_GetTrip_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;12184&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
vars.put (&quot;CheckTransaction&quot;, jsonString);	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddTrip" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&#xd;
 &quot;method&quot;:&quot;AddTrip&quot;,&#xd;
 &quot;params&quot;:{&#xd;
      &quot;priceID&quot;:8327,&#xd;
      &quot;Price&quot;:12000,&#xd;
      &quot;dateArrival&quot;: &quot;2018-02-15 11:30&quot;,&#xd;
      &quot;dateDeparture&quot;: &quot;2018-02-15 15:30&quot;,&#xd;
      &quot;locationAddress&quot;:&quot;Petrovka 13&quot;,&#xd;
      &quot;passengers&quot;:[&#xd;
          {&#xd;
              &quot;phone&quot;:8911111111,&#xd;
              &quot;email&quot;:&quot;mail121212@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Client Name&quot;&#xd;
         },&#xd;
          {&#xd;
              &quot;phone&quot;:23554522212,&#xd;
              &quot;email&quot;:&quot;passenger@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Passenger Name&quot;&#xd;
          }&#xd;
      ],&#xd;
      &quot;userID&quot;:12184,&#xd;
      &quot;departureNumber&quot;:&quot;Moscow-Berlin&quot;,&#xd;
      &quot;lang&quot;: &quot;ru&quot;, &#xd;
      &quot;currency&quot;: &quot;RUB&quot;,&#xd;
      &quot;sendParams&quot;:{&#xd;
          &quot;SendClientVoucher&quot;:true,&#xd;
          &quot;SendAdminVoucher&quot;:true,&#xd;
          &quot;SendClientDoc&quot;:false,&#xd;
          &quot;SendAdminDoc&quot;:true&#xd;
      }&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="PriceID" enabled="true">
            <stringProp name="VAR">PriceID</stringProp>
            <stringProp name="JSONPATH">$..PriceID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_PriceID" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;PriceID_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;8327&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="OrderID" enabled="true">
            <stringProp name="VAR">OrderID</stringProp>
            <stringProp name="JSONPATH">$..OrderID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="transactionID" enabled="true">
            <stringProp name="VAR">transactionID</stringProp>
            <stringProp name="JSONPATH">$..Transaction</stringProp>
            <stringProp name="DEFAULT">transaction_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetUrlToFee" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetUrlToFee&quot;,&quot;params&quot;:{&#xd;
      &quot;userID&quot;:12184,&#xd;
      &quot;transaction&quot;:${transactionID_1}&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1685950984">test.iwayex.com</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Title_GetAllowablePlacesTypes" enabled="false">
            <stringProp name="VAR">Title_GetAllowablePlacesTypes</stringProp>
            <stringProp name="JSONPATH">$..Title</stringProp>
            <stringProp name="DEFAULT">Title_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;Title_GetAllowablePlacesTypes_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;\u0410\u044d\u0440\u043e\u043f\u043e\u0440\u0442&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="EditTrip" enabled="false">
          <stringProp name="ForeachController.inputVal">transactionID</stringProp>
          <stringProp name="ForeachController.returnVal">transactionID</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">OrderID</stringProp>
            <stringProp name="ForeachController.returnVal">OrderID</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EditTrip " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;EditTrip&quot;,&quot;params&quot;:{&#xd;
      &quot;userID&quot;: 12184,&#xd;
      &quot;password&quot;: &quot;idu183&quot;,&#xd;
      &quot;orderID&quot;: ${OrderID},&#xd;
      &quot;transaction&quot;: ${transactionID},&#xd;
      &quot;dateArrival&quot;: &quot;2018-01-29 11:00&quot;,&#xd;
      &quot;dateDeparture&quot;: &quot;2018-01-29 19:00&quot;,&#xd;
      &quot;locationAddress&quot;: &quot;МКАД&quot;,&#xd;
      &quot;destinationAddress&quot;: &quot;Красная площадь123332&quot;,&#xd;
      &quot;passengers&quot;: [&#xd;
          {&#xd;
              &quot;phone&quot;:&quot;89529525555&quot;,&#xd;
              &quot;email&quot;:&quot;nurgaleev@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Name Name&quot;&#xd;
         },&#xd;
          {&#xd;
              &quot;phone&quot;:&quot;89529525555&quot;,&#xd;
              &quot;email&quot;:&quot;nurgaleev@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Name Name&quot;&#xd;
          }&#xd;
      ],&#xd;
      &quot;departureNumberEx&quot;:&quot;wagon №6&quot;,&#xd;
      &quot;departureNumber&quot;:&quot;Moscow-Berlin&quot;,&#xd;
      &quot;lang&quot;:&quot;ru&quot;, &#xd;
  	 &quot;currency&quot;:&quot;RUB&quot;,&#xd;
      &quot;sendParams&quot;:{&#xd;
          &quot;SendClientVoucher&quot;: false,&#xd;
          &quot;SendAdminVoucher&quot;: false,&#xd;
          &quot;SendClientDoc&quot;: false,&#xd;
          &quot;SendAdminDoc&quot;: true&#xd;
      }&#xd;
            },&#xd;
&quot;id&quot;:1}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rpc</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="UserID_EditTrip" enabled="true">
                <stringProp name="VAR">UserID_EditTrip</stringProp>
                <stringProp name="JSONPATH">$..UserID</stringProp>
                <stringProp name="DEFAULT">OrderID_not_found</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_EditTrip_1" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">String jsonString =  vars.get(&quot;UserID_EditTrip_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;12184&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">false</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ApproveTrip" enabled="false">
          <stringProp name="ForeachController.inputVal">transactionID</stringProp>
          <stringProp name="ForeachController.returnVal">transactionID</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ApproveTrip" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;ApproveTrip&quot;,&quot;params&quot;:{&#xd;
  	&quot;userID&quot;:12184,&#xd;
  	&quot;password&quot;:&quot;idu183&quot;,&#xd;
	&quot;transaction&quot;:${transactionID}&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/rpc</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="UserID_ApproveTrip" enabled="true">
              <stringProp name="VAR">UserID_ApproveTrip</stringProp>
              <stringProp name="JSONPATH">$..UserID</stringProp>
              <stringProp name="DEFAULT">OrderID_not_found</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String jsonString =  vars.get(&quot;UserID_ApproveTrip_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;12184&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
vars.put (&quot;CheckTransaction&quot;, jsonString);	
	</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="OrderIDEdit" enabled="false">
              <stringProp name="VAR">OrderIDEdit</stringProp>
              <stringProp name="JSONPATH">$..OrderID</stringProp>
              <stringProp name="DEFAULT">OrderID_not_found</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="transactionIDEdit" enabled="false">
              <stringProp name="VAR">transactionIDEdit</stringProp>
              <stringProp name="JSONPATH">$..Transaction</stringProp>
              <stringProp name="DEFAULT">transaction_not_found</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">false</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSettingUser" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetSettingUser&quot;,&quot;params&quot;:{&#xd;
	&quot;userID&quot;:12184,&#xd;
	&quot;versionPrefix&quot;:&quot;&quot;,&#xd;
	&quot;currency&quot;:&quot;${CURRENCY}&quot;,&#xd;
	&quot;lang&quot;:&quot;${LANGUAGE}&quot;,&#xd;
	&quot;env&quot;:&quot;live&quot;,&#xd;
	&quot;isTestUser&quot;:false,&#xd;
	&quot;_moduleType&quot;:&quot;old&quot;,&#xd;
	&quot;password&quot;:null&#xd;
	},&#xd;
	&quot;id&quot;:&quot;9b8e09d6-4fae-4392-8a04-8058731e8ae9&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="UserID_GetSettingUser" enabled="true">
            <stringProp name="VAR">UserID_GetSettingUser</stringProp>
            <stringProp name="JSONPATH">$..UserID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;UserID_GetSettingUser_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;12184&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
vars.put (&quot;CheckTransaction&quot;, jsonString);	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TimeWithoutPenalty" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;TimeWithoutPenalty&quot;,&quot;params&quot;:{&#xd;
  	&quot;userID&quot;:12184,&#xd;
  	&quot;password&quot;:&quot;idu183&quot;,&#xd;
	&quot;transaction&quot;:${transactionID},&#xd;
	&quot;orderID&quot;: ${OrderID}&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="message_TimeWithoutPenalty" enabled="true">
            <stringProp name="VAR">message_TimeWithoutPenalty</stringProp>
            <stringProp name="JSONPATH">$..message</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;message_TimeWithoutPenalty_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != null){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
vars.put (&quot;CheckTransaction&quot;, jsonString);	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPrice" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetPrice&quot;,&#xd;
   &quot;params&quot;:{&#xd;
       &quot;startPlaceAuditID&quot;: 135,&#xd;
       &quot;finishPlaceAuditID&quot;: &quot;&quot;&#xd;
       },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Price_GetPrice" enabled="true">
            <stringProp name="VAR">Price_GetPrice</stringProp>
            <stringProp name="JSONPATH">$..Price</stringProp>
            <stringProp name="DEFAULT">Price_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;Price_GetPrice_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;1010&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
vars.put (&quot;CheckTransaction&quot;, jsonString);	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetWidget" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetWidget&quot;,&quot;params&quot;:{&#xd;
	&quot;userID&quot;:12184,&#xd;
	&quot;versionPrefix&quot;:&quot;&quot;,&#xd;
	&quot;currency&quot;:&quot;RUB&quot;,&#xd;
	&quot;lang&quot;:&quot;ru&quot;,&#xd;
	&quot;env&quot;:&quot;test&quot;,&#xd;
	&quot;isTestUser&quot;:false,&#xd;
	&quot;_moduleType&quot;:&quot;nextgen&quot;,&#xd;
	&quot;path&quot;:&quot;Multifinder/localization&quot;,&#xd;
	&quot;model&quot;:{&#xd;
		&quot;isFull&quot;:false,&#xd;
		&quot;address&quot;:{&#xd;
			&quot;address&quot;:null,&#xd;
			&quot;geoCheck&quot;:null,&#xd;
			&quot;geoData&quot;:null&#xd;
			},&#xd;
			&quot;place&quot;:{&#xd;
				&quot;AuditID&quot;:null,&#xd;
				&quot;TypeID&quot;:null,&#xd;
				&quot;IATA&quot;:null,&#xd;
				&quot;TitleFormat&quot;:null,&#xd;
				&quot;PlaceType&quot;:null,&#xd;
				&quot;Place&quot;:null,&#xd;
				&quot;_rectangle&quot;:null,&#xd;
				&quot;_polygon&quot;:null&#xd;
				}&#xd;
				},&#xd;
				&quot;clientID&quot;:null,&#xd;
				&quot;disabled&quot;:false,&#xd;
				&quot;parentPlaceID&quot;:null,&#xd;
				&quot;mode&quot;:&quot;from&quot;,&#xd;
				&quot;title&quot;:null,&#xd;
				&quot;boundedBy&quot;:null&#xd;
				},&#xd;
				&quot;id&quot;:&quot;f3f082b8-00b3-413a-8f60-36c49ec08ed0&quot;&#xd;
				}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="TextAssertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="570573587">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:&quot;{\&quot;defTitle\&quot;:\&quot;\\u041e\\u0442\\u043a\\u0443\\u0434\\u0430\&quot;,\&quot;defTitle2\&quot;:\&quot;\\u041a\\u0443\\u0434\\u0430\&quot;,\&quot;noOptions\&quot;:\&quot;\\u041d\\u0435\\u0442 \\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442\\u043e\\u0432 \\u0434\\u043b\\u044f \\u0434\\u0430\\u043d\\u043d\\u043e\\u0433\\u043e \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\\u0430\&quot;,\&quot;moreItems\&quot;:\&quot;\\u0415\\u0449\\u0451 {0} [{0},\\\&quot;\\u043f\\u0443\\u043d\\u043a\\u0442\\\&quot;,\\\&quot;\\u043f\\u0443\\u043d\\u043a\\u0442\\u0430\\\&quot;,\\\&quot;\\u043f\\u0443\\u043d\\u043a\\u0442\\u043e\\u0432\\\&quot;], \\u0443\\u0442\\u043e\\u0447\\u043d\\u0438\\u0442\\u0435 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\&quot;,\&quot;moreItems2\&quot;:\&quot;\\u0415\\u0449\\u0451 \\u0431\\u043e\\u043b\\u0435\\u0435 {0} \\u043f\\u0443\\u043d\\u043a\\u0442\\u043e\\u0432, \\u0443\\u0442\\u043e\\u0447\\u043d\\u0438\\u0442\\u0435 \\u0437\\u0430\\u043f\\u0440\\u043e\\u0441\&quot;,\&quot;checkAddressAlert\&quot;:\&quot;\\u0421\\u0442\\u043e\\u0438\\u043c\\u043e\\u0441\\u0442\\u044c \\u043c\\u043e\\u0436\\u0435\\u0442 \\u0438\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c\\u0441\\u044f \\u043f\\u043e\\u0441\\u043b\\u0435 \\u043f\\u0440\\u043e\\u0432\\u0435\\u0440\\u043a\\u0438 \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430 \\u043c\\u0435\\u043d\\u0435\\u0434\\u0436\\u0435\\u0440\\u043e\\u043c\&quot;,\&quot;softAlert\&quot;:\&quot;\\u041f\\u0440\\u043e\\u0432\\u0435\\u0440\\u044c\\u0442\\u0435, \\u0432\\u0435\\u0440\\u043d\\u043e \\u043b\\u0438 \\u0432\\u0432\\u0435\\u0434\\u0451\\u043d \\u0430\\u0434\\u0440\\u0435\\u0441. &lt;br \\\/&gt; \\u0423\\u043a\\u0430\\u0436\\u0438\\u0442\\u0435 \\u0442\\u043e\\u043b\\u044c\\u043a\\u043e \\u0443\\u043b\\u0438\\u0446\\u0443 \\u0438 \\u043d\\u043e\\u043c\\u0435\\u0440 \\u0434\\u043e\\u043c\\u0430.\&quot;}&quot;,&quot;id&quot;:&quot;f3f082b8-00b3-413a-8f60-36c49ec08ed0&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Autofind" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;AutoFind&quot;,&#xd;
   &quot;params&quot;:{&#xd;
       &quot;term&quot;:&quot;Novos&quot;,&#xd;
       &quot;lang&quot;:&quot;ru&quot;&#xd;
   },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Country_GetSettingUser" enabled="true">
            <stringProp name="VAR">Country_GetSettingUser</stringProp>
            <stringProp name="JSONPATH">$..Country</stringProp>
            <stringProp name="DEFAULT">Country_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;Country_GetSettingUser_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;RUSSIA&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
vars.put (&quot;CheckTransaction&quot;, jsonString);	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPriceIATA" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetPriceIATA&quot;,&#xd;
    &quot;params&quot;:{&#xd;
            &quot;IATA&quot;:&quot;DME&quot;&#xd;
                 },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="ReversePrice_GetPriceIATA" enabled="true">
            <stringProp name="VAR">ReversePrice_GetPriceIATA</stringProp>
            <stringProp name="JSONPATH">$..ReversePrice</stringProp>
            <stringProp name="DEFAULT">Country_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_ReverseID_GetPriceIATA_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;ReversePrice_GetPriceIATA_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;1150&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAllowableIATACode" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetAllowableIATACode&quot;, &#xd;
  &quot;params&quot;:{&#xd;
  	&quot;getPlaceID&quot;:true&#xd;
  }, &#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="PlaceAuditID_GetAllowableIATACode" enabled="true">
            <stringProp name="VAR">PlaceAuditID_GetAllowableIATACode</stringProp>
            <stringProp name="JSONPATH">$..PlaceAuditID</stringProp>
            <stringProp name="DEFAULT">Country_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_ReverseID_GetPriceIATA_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;PlaceAuditID_GetAllowableIATACode_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;5092&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BatchReservations" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;BatchReservations&quot;,&quot;params&quot;:{&#xd;
	&quot;data&quot;:[&#xd;
  		{&#xd;
  			&quot;priceID&quot;:7228, &#xd;
  			&quot;dateArrival&quot;: &quot;2018-05-28 07:00&quot;,&#xd;
  			&quot;dateDeparture&quot;: &quot;2018-05-28 12:00&quot;, &#xd;
  			&quot;locationAddress&quot;:&quot;locationAddress-6&quot;, &#xd;
  			&quot;passengers&quot;:[&#xd;
  				{&#xd;
  					&quot;phone&quot;:&quot;89529525252&quot;, &#xd;
  					&quot;email&quot;:&quot;email@email.com&quot;, &#xd;
  					&quot;name&quot;:&quot;Name Name&quot;&#xd;
  				}, &#xd;
  				{&#xd;
  					&quot;phone&quot;:&quot;89529525252&quot;, &#xd;
  					&quot;email&quot;:&quot;email@email.com&quot;, &#xd;
  					&quot;name&quot;:&quot;Name Name&quot;&#xd;
  				}&#xd;
  			], &#xd;
  			&quot;userID&quot;:12184,&#xd;
  			&quot;arrivalNumber&quot;:&quot;arrivalNumber&quot;, &#xd;
  			&quot;lang&quot;:&quot;en&quot;, &#xd;
  			&quot;currency&quot;:&quot;EUR&quot;&#xd;
  		},&#xd;
  		{&#xd;
  			&quot;priceID&quot;:6942, &#xd;
  			&quot;dateArrival&quot;: &quot;2018-06-17 07:00&quot;, &#xd;
  			&quot;passengers&quot;:[&#xd;
  				{&#xd;
  					&quot;phone&quot;:&quot;89529525252&quot;, &#xd;
  					&quot;email&quot;:&quot;email@email.com&quot;, &#xd;
  					&quot;name&quot;:&quot;Name1234 Name&quot;&#xd;
  				}, &#xd;
  				{&#xd;
  					&quot;phone&quot;:&quot;89529525252&quot;, &#xd;
  					&quot;email&quot;:&quot;email@email.com&quot;, &#xd;
  					&quot;name&quot;:&quot;Name1234 Name&quot;&#xd;
  				}&#xd;
  			], &#xd;
  			&quot;userID&quot;:12184,&#xd;
  			&quot;arrivalNumber&quot;:&quot;arrivalNumber&quot;, &#xd;
  			&quot;destinationAddress&quot;:&quot;destinationAddress-6 &quot;, &#xd;
  			&quot;lang&quot;:&quot;en&quot;, &#xd;
  			&quot;currency&quot;:&quot;EUR&quot;&#xd;
  		}&#xd;
  	] &#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="PriceID" enabled="true">
            <stringProp name="VAR">PriceID</stringProp>
            <stringProp name="JSONPATH">$..PriceID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_PriceID" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;PriceID_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;7228&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="OrderID_BR" enabled="true">
            <stringProp name="VAR">OrderID_BR</stringProp>
            <stringProp name="JSONPATH">$..OrderID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="transactionID_BR" enabled="true">
            <stringProp name="VAR">transactionID_BR</stringProp>
            <stringProp name="JSONPATH">$..Transaction</stringProp>
            <stringProp name="DEFAULT">transaction_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ApproveTrip_BR " enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;ApproveTrip&quot;,&quot;params&quot;:{&#xd;
  	&quot;userID&quot;:12184,&#xd;
  	&quot;password&quot;:&quot;idu183&quot;,&#xd;
	&quot;transaction&quot;:${transactionID_BR_1}&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="UserID_ApproveTrip" enabled="true">
            <stringProp name="VAR">UserID_ApproveTrip</stringProp>
            <stringProp name="JSONPATH">$..UserID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;UserID_ApproveTrip_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;12184&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="OrderIDEdit" enabled="true">
            <stringProp name="VAR">OrderIDEdit</stringProp>
            <stringProp name="JSONPATH">$..OrderID</stringProp>
            <stringProp name="DEFAULT">OrderID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="transactionIDEdit" enabled="true">
            <stringProp name="VAR">transactionIDEdit</stringProp>
            <stringProp name="JSONPATH">$..Transaction</stringProp>
            <stringProp name="DEFAULT">transaction_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CancellationOrder" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;CancellationOrder&quot;,&quot;params&quot;:{&#xd;
      &quot;userID&quot;:12184,&#xd;
      &quot;password&quot;:&quot;idu183&quot;,&#xd;
      &quot;transaction&quot;:${transactionIDEdit_1},&#xd;
      &quot;orderID&quot;:${OrderIDEdit_1}&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="OrderID_CancellationOrder" enabled="true">
            <stringProp name="VAR">OrderID_CancellationOrder</stringProp>
            <stringProp name="JSONPATH">$..OrderID</stringProp>
            <stringProp name="DEFAULT">Title_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;OrderID_CancellationOrder_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;${OrderIDEdit_1}&quot;) {
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetParamsToChange" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetParamsToChange&quot;,&quot;params&quot;:{&#xd;
  	&quot;userID&quot;:12184,&#xd;
     &quot;transaction&quot;:${transactionID_1},&#xd;
     &quot;orderID&quot;:${OrderID_1}&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Names_GetParamsToChange" enabled="true">
            <stringProp name="VAR">Names_GetParamsToChange</stringProp>
            <stringProp name="JSONPATH">$..Names</stringProp>
            <stringProp name="DEFAULT">Names_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;Names_GetParamsToChange_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;data available to change&quot;) {
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckAllowedTimeOrde" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;CheckAllowedTimeOrder&quot;,&quot;params&quot;:{&#xd;
  		&quot;priceAuditID&quot;: ${AuditID_ID}&#xd;
  		},&#xd;
&quot;id&quot;:1}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="startTimeZoneCode_CheckAllowedTimeOrder" enabled="true">
            <stringProp name="VAR">startTimeZoneCode_CheckAllowedTimeOrder</stringProp>
            <stringProp name="JSONPATH">$..startTimeZoneCode</stringProp>
            <stringProp name="DEFAULT">startTimeZoneCode_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;startTimeZoneCode_CheckAllowedTimeOrder_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString == null){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAllowablePlacesTypes" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&#xd;
  		&quot;method&quot;:&quot;GetAllowablePlacesTypes&quot;, &#xd;
  		&quot;params&quot;:{&#xd;
  			&quot;lang&quot;:&quot;ru&quot;&#xd;
  		},&#xd;
&quot;id&quot;:1}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Title_GetAllowablePlacesTypes" enabled="true">
            <stringProp name="VAR">Title_GetAllowablePlacesTypes</stringProp>
            <stringProp name="JSONPATH">$..Title</stringProp>
            <stringProp name="DEFAULT">Title_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;Title_GetAllowablePlacesTypes_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;\u0410\u044d\u0440\u043e\u043f\u043e\u0440\u0442&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPathToVoucher" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetPathToVoucher&quot;,&quot;params&quot;:{&#xd;
  	&quot;userID&quot;:12184,&#xd;
  	&quot;password&quot;:&quot;idu183&quot;,&#xd;
	&quot;transaction&quot;: 276411848&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1685950984">test.iwayex.com</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Title_GetAllowablePlacesTypes" enabled="false">
            <stringProp name="VAR">Title_GetAllowablePlacesTypes</stringProp>
            <stringProp name="JSONPATH">$..Title</stringProp>
            <stringProp name="DEFAULT">Title_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;Title_GetAllowablePlacesTypes_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;\u0410\u044d\u0440\u043e\u043f\u043e\u0440\u0442&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SendVoucher" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;SendVoucher&quot;,&quot;params&quot;:{&#xd;
  	&quot;userID&quot;:12184,&#xd;
  	&quot;password&quot;:&quot;idu183&quot;,&#xd;
  	&quot;transaction&quot;: 882114731,&#xd;
	&quot;sendParams&quot;:{&#xd;
          &quot;SendClientVoucher&quot;: false,&#xd;
          &quot;SendAdminVoucher&quot;: false,&#xd;
          &quot;SendClientDoc&quot;: false,&#xd;
          &quot;SendAdminDoc&quot;: true&#xd;
      }&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1685950984">test.iwayex.com</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Title_GetAllowablePlacesTypes" enabled="false">
            <stringProp name="VAR">Title_GetAllowablePlacesTypes</stringProp>
            <stringProp name="JSONPATH">$..Title</stringProp>
            <stringProp name="DEFAULT">Title_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;Title_GetAllowablePlacesTypes_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;\u0410\u044d\u0440\u043e\u043f\u043e\u0440\u0442&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCountries" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetCountries&quot;,&quot;params&quot;:{&#xd;
  	&quot;userID&quot;:12184,&#xd;
  	&quot;lang&quot;:&quot;en&quot;&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Title_GetCountries" enabled="true">
            <stringProp name="VAR">Title_GetCountries</stringProp>
            <stringProp name="JSONPATH">$..Title</stringProp>
            <stringProp name="DEFAULT">Title_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_Title_GetCountries" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;Title_GetCountries_2&quot;);
//String jsonString1 =  vars.get(&quot;Title_GetCountries_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	
//log.info (&quot;The example answer is &quot; + jsonString1);	


	if 	(jsonString != &quot;Great Britain&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetRegions" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetRegions&quot;,&quot;params&quot;:{&#xd;
  	&quot;userID&quot;:12184,&#xd;
  	&quot;lang&quot;:&quot;en&quot;&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="RegionID_GetCountries" enabled="true">
            <stringProp name="VAR">RegionID_GetCountries</stringProp>
            <stringProp name="JSONPATH">$..RegionID</stringProp>
            <stringProp name="DEFAULT">RegionID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Title_GetCountries" enabled="false">
            <stringProp name="VAR">Title_GetCountries</stringProp>
            <stringProp name="JSONPATH">$..Title</stringProp>
            <stringProp name="DEFAULT">Title_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_Title_GetCountries" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;RegionID_GetCountries_1&quot;);
//String jsonString1 =  vars.get(&quot;Title_GetCountries_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	
//log.info (&quot;The example answer is &quot; + jsonString1);	


	if 	(jsonString != &quot;4312&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCities" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetCities&quot;,&quot;params&quot;:{&#xd;
  	&quot;userID&quot;:12184,&#xd;
  	&quot;lang&quot;:&quot;en&quot;&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="RegionID_GetCities" enabled="true">
            <stringProp name="VAR">RegionID_GetCities</stringProp>
            <stringProp name="JSONPATH">$..RegionID</stringProp>
            <stringProp name="DEFAULT">RegionID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Title_GetCountries" enabled="false">
            <stringProp name="VAR">Title_GetCountries</stringProp>
            <stringProp name="JSONPATH">$..Title</stringProp>
            <stringProp name="DEFAULT">Title_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_Title_GetCountries" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;RegionID_GetCities_1&quot;);
//String jsonString1 =  vars.get(&quot;Title_GetCountries_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	
//log.info (&quot;The example answer is &quot; + jsonString1);	


	if 	(jsonString != &quot;4312&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="CityID" enabled="true">
            <stringProp name="VAR">CityID</stringProp>
            <stringProp name="JSONPATH">$..CityID</stringProp>
            <stringProp name="DEFAULT">CityID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPlaceFromCity" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetPlaceFromCity&quot;,&quot;params&quot;:{&#xd;
      &quot;userID&quot;:12184,&#xd;
      &quot;cityID&quot;:${CityID_5},&#xd;
      &quot;lang&quot;:&quot;en&quot;&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="RegionID_GetCities" enabled="true">
            <stringProp name="VAR">RegionID_GetCities</stringProp>
            <stringProp name="JSONPATH">$..RegionID</stringProp>
            <stringProp name="DEFAULT">RegionID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Title_GetCountries" enabled="false">
            <stringProp name="VAR">Title_GetCountries</stringProp>
            <stringProp name="JSONPATH">$..Title</stringProp>
            <stringProp name="DEFAULT">Title_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_Title_GetCountries" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;RegionID_GetCities_1&quot;);
//String jsonString1 =  vars.get(&quot;Title_GetCountries_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	
//log.info (&quot;The example answer is &quot; + jsonString1);	


	if 	(jsonString != &quot;4312&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPlaceFromPlace" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetPlaceFromPlace&quot;,&quot;params&quot;:{&#xd;
      &quot;userID&quot;:12184,&#xd;
      &quot;startID&quot;:8&#xd;
    },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="AuditID_GetPlaceFromPlace" enabled="true">
            <stringProp name="VAR">AuditID_GetPlaceFromPlace</stringProp>
            <stringProp name="JSONPATH">$..AuditID</stringProp>
            <stringProp name="DEFAULT">AuditID_GetPlaceFromPlace_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Title_GetCountries" enabled="false">
            <stringProp name="VAR">Title_GetCountries</stringProp>
            <stringProp name="JSONPATH">$..Title</stringProp>
            <stringProp name="DEFAULT">Title_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_Title_GetCountries" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;AuditID_GetPlaceFromPlace_1&quot;);
//String jsonString1 =  vars.get(&quot;Title_GetCountries_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	
//log.info (&quot;The example answer is &quot; + jsonString1);	


	if 	(jsonString != &quot;8152&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMaskReservation" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetMaskReservation&quot;,&quot;params&quot;:{&#xd;
  		&quot;priceID&quot;:${AuditID_ID},&#xd;
  		&quot;lang&quot;:&quot;en&quot;&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion GetMaskReservation" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1670872319">Price ID cannot be empty</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPriceRent" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetPriceRent&quot;,&#xd;
   &quot;params&quot;:{&#xd;
       &quot;placeAuditID&quot;:135&#xd;
       },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="AuditID_GetPriceRent" enabled="true">
            <stringProp name="VAR">AuditID_GetPriceRent</stringProp>
            <stringProp name="JSONPATH">$..AuditID</stringProp>
            <stringProp name="DEFAULT">AuditID_GetPlaceFromPlace_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_GetPriceRent" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;AuditID_GetPriceRent_1&quot;);
//String jsonString1 =  vars.get(&quot;Title_GetCountries_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	
//log.info (&quot;The example answer is &quot; + jsonString1);	


	if 	(jsonString != &quot;12404&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPlaceResponsibilityRent" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetPlaceResponsibilityRent&quot;,&#xd;
   &quot;params&quot;:{&#xd;
       &quot;term&quot;:&quot;Novos&quot;&#xd;
       },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="CountryID_GetPlaceResponsibilityRent" enabled="true">
            <stringProp name="VAR">CountryID_GetPlaceResponsibilityRent</stringProp>
            <stringProp name="JSONPATH">$..CountryID</stringProp>
            <stringProp name="DEFAULT">CountryID_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_GetPriceRent" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;CountryID_GetPlaceResponsibilityRent_1&quot;);
//String jsonString1 =  vars.get(&quot;Title_GetCountries_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	
//log.info (&quot;The example answer is &quot; + jsonString1);	


	if 	(jsonString != &quot;3159&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SetRegularClients" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;SetRegularClients&quot;,&#xd;
   &quot;params&quot;:{&#xd;
       &quot;userID&quot;:12184,&#xd;
       &quot;password&quot;:&quot;idu183&quot;,&#xd;
       &quot;orderID&quot;:${OrderID_1}&#xd;
   },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Phone_SetRegularClients" enabled="true">
            <stringProp name="VAR">Phone_SetRegularClients</stringProp>
            <stringProp name="JSONPATH">$..Phone</stringProp>
            <stringProp name="DEFAULT">Phone_Not_Found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_GetPriceRent" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;ClientID_SetRegularClients_1&quot;);
//String jsonString1 =  vars.get(&quot;Title_GetCountries_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	
//log.info (&quot;The example answer is &quot; + jsonString1);	


	if 	(jsonString != &quot;8911111111&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Random date Old Api test" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1516939895000</longProp>
        <longProp name="ThreadGroup.end_time">1516939895000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV_Trip.csv" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">/home/user/Documents/CSVjmeter/Trip1.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">PriceID,ReverseID,AuditID,Date,ServiceID,Price,StartID,FinishID,StartTypeID,FinishTypeID,SortFT,CarClassID,Distance,TravelTime,AllowableTime,CancellationTime,MinDuration,CarDeliveranceFee,Threshold,Discount,AllowableSubaddress,CoefSubaddress,DoerCityID,Active,MinimalPrice,DeliveryCosts,EnableKM,PriceCurrency,TPCurrency,PriceLevel</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV_AuditID_ID" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">/home/user/Documents/CSVjmeter/AuditID_ID1.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">AuditID_ID</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV_Currency" enabled="true">
          <stringProp name="filename">/home/user/Documents/CSVjmeter/Currency1.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CURRENCY,LANGUAGE,PlaceRandom</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV_IATA" enabled="true">
          <stringProp name="filename">/home/user/Documents/CSVjmeter/IATA1.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">IATA</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddTrip Random" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;AddTrip&quot;,&quot;params&quot;:{&#xd;
      &quot;priceID&quot;:8327,&#xd;
      &quot;Price&quot;:${__Random(0,30000)},&#xd;
      &quot;dateArrival&quot;: &quot;${MyCustomTimeStart}&quot;,&#xd;
      &quot;dateDeparture&quot;:&quot;${MyCustomTimeEnd}&quot;,&#xd;
      &quot;locationAddress&quot;:&quot;locationAddress-6&quot;,&#xd;
      &quot;passengers&quot;:[&#xd;
          {&#xd;
              &quot;phone&quot;:${__Random(11111111111,99999999999)},&#xd;
              &quot;email&quot;:&quot;client@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Client Name&quot;&#xd;
         },&#xd;
          {&#xd;
              &quot;phone&quot;:${__Random(11111111111,99999999999)},&#xd;
              &quot;email&quot;:&quot;passenger@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Passenger Name&quot;&#xd;
          }&#xd;
      ],&#xd;
      &quot;userID&quot;:${userID},&#xd;
      &quot;departureNumber&quot;:&quot;Moscow-Berlin&quot;,&#xd;
      &quot;lang&quot;: &quot;${LANGUAGE}&quot;, &#xd;
      &quot;currency&quot;: &quot;${CURRENCY}&quot;,&#xd;
      &quot;sendParams&quot;:{&#xd;
          &quot;SendClientVoucher&quot;:true,&#xd;
          &quot;SendAdminVoucher&quot;:true,&#xd;
          &quot;SendClientDoc&quot;:false,&#xd;
          &quot;SendAdminDoc&quot;:true&#xd;
      }&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TransactionID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">PriceID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..PriceID</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">8327</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">PriceID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..PriceID</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">8327</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;PriceID&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;8327&quot;){
		AssertionResult.setFailureMessage(&quot;The Price place is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EditTrip Random" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;EditTrip&quot;,&quot;params&quot;:{&#xd;
      &quot;userID&quot;: 12184,&#xd;
      &quot;password&quot;: &quot;idu183&quot;,&#xd;
      &quot;orderID&quot;: 20048790,&#xd;
      &quot;transaction&quot;: 561523117,&#xd;
      &quot;dateArrival&quot;: &quot;2018-01-29 11:00&quot;,&#xd;
      &quot;dateDeparture&quot;: &quot;2018-01-29 19:00&quot;,&#xd;
      &quot;locationAddress&quot;: &quot;МКАД&quot;,&#xd;
      &quot;destinationAddress&quot;: &quot;Красная площадь123332&quot;,&#xd;
      &quot;passengers&quot;: [&#xd;
          {&#xd;
              &quot;phone&quot;:&quot;89529525555&quot;,&#xd;
              &quot;email&quot;:&quot;nurgaleev@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Name Name&quot;&#xd;
         },&#xd;
          {&#xd;
              &quot;phone&quot;:&quot;89529525555&quot;,&#xd;
              &quot;email&quot;:&quot;nurgaleev@iwayex.com&quot;,&#xd;
              &quot;name&quot;:&quot;Name Name&quot;&#xd;
          }&#xd;
      ],&#xd;
      &quot;departureNumberEx&quot;:&quot;wagon №6&quot;,&#xd;
      &quot;departureNumber&quot;:&quot;Moscow-Berlin&quot;,&#xd;
      &quot;lang&quot;:&quot;${LANGUAGE}&quot;, &#xd;
  	 &quot;currency&quot;:&quot;${CURRENCY}&quot;,&#xd;
      &quot;sendParams&quot;:{&#xd;
          &quot;SendClientVoucher&quot;: true,&#xd;
          &quot;SendAdminVoucher&quot;: true,&#xd;
          &quot;SendClientDoc&quot;: false,&#xd;
          &quot;SendAdminDoc&quot;: true&#xd;
      }&#xd;
            },&#xd;
&quot;id&quot;:1}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">Result[*].data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">Пользователь не найден accessMethod</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;data&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;Пользователь не найден accessMethod&quot;){
		AssertionResult.setFailureMessage(&quot;The Place is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="TextAssertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-728744579">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:{&quot;Date&quot;:&quot;2018-01-15 10:26&quot;,&quot;DateChange&quot;:&quot;2018-01-15 10:26&quot;,&quot;DateResponse&quot;:null,&quot;DateArrival&quot;:&quot;2018-05-27 07:00&quot;,&quot;DateDeparture&quot;:&quot;2018-05-27 13:00&quot;,&quot;OrderID&quot;:20014854,&quot;PriceID&quot;:8327,&quot;UserID&quot;:1863,&quot;StartID&quot;:135,&quot;StartTitle&quot;:&quot;Moscow (MKAD)&quot;,&quot;FinishID&quot;:1200,&quot;FinishTitle&quot;:&quot;Belorussky Railway Station (Moscow)&quot;,&quot;OrderType&quot;:12,&quot;Transaction&quot;:437678111,&quot;PayableStatus&quot;:0,&quot;OrderStatus&quot;:0,&quot;ExOrderStatus&quot;:0,&quot;ServiceID&quot;:1,&quot;Duration&quot;:0,&quot;DoerCityID&quot;:4400,&quot;StartType&quot;:7,&quot;PlaceTypeStart&quot;:&quot;MKAD&quot;,&quot;FinishType&quot;:3,&quot;PlaceTypeFinish&quot;:&quot;Railway Station&quot;,&quot;AllowableTime&quot;:2,&quot;CancellationTime&quot;:2,&quot;CarClassID&quot;:2,&quot;CityStartID&quot;:4400,&quot;CityStart&quot;:&quot;Moscow&quot;,&quot;CityFinishID&quot;:4400,&quot;CityFinish&quot;:&quot;Moscow&quot;,&quot;Price&quot;:19,&quot;Value&quot;:70.89,&quot;Nominal&quot;:1,&quot;Reward&quot;:5,&quot;BookerNumber&quot;:&quot;C-827&quot;,&quot;Currency&quot;:&quot;EUR&quot;,&quot;ArrivalNumber&quot;:&quot;&quot;,&quot;DepartureNumber&quot;:&quot;Moscow-Berlin&quot;,&quot;Table&quot;:&quot;Client Name|Passenger Name&quot;,&quot;Notes&quot;:&quot;&quot;,&quot;InternalNumber&quot;:&quot;&quot;,&quot;UserIP&quot;:&quot;&quot;,&quot;StartTimeZoneCode&quot;:&quot;Europe\/Moscow&quot;,&quot;FinishTimeZoneCode&quot;:&quot;Europe\/Moscow&quot;,&quot;OffsetStartTimeZone&quot;:&quot;+3&quot;,&quot;OffsetFinishTimeZone&quot;:&quot;+3&quot;,&quot;LocationAddress&quot;:&quot;locationAddress-6&quot;,&quot;DestinationAddress&quot;:&quot;&quot;,&quot;Lang&quot;:&quot;en&quot;,&quot;NetWorth&quot;:0,&quot;Rate&quot;:0,&quot;DiscountValue&quot;:0,&quot;Discount&quot;:0,&quot;Threshold&quot;:0,&quot;AllowableSubaddress&quot;:3,&quot;CoefSubaddress&quot;:1,&quot;PriceSubaddress&quot;:9,&quot;Subaddress&quot;:[],&quot;NumberSubaddress&quot;:0,&quot;CarClass&quot;:&quot;standard&quot;,&quot;SendParams&quot;:{&quot;SendClientVoucher&quot;:true,&quot;SendAdminVoucher&quot;:true,&quot;SendClientDoc&quot;:false,&quot;SendAdminDoc&quot;:true},&quot;Passengers&quot;:[{&quot;Name&quot;:&quot;Client Name&quot;,&quot;Email&quot;:&quot;client@iwayex.com&quot;,&quot;Phone&quot;:&quot;89529525555&quot;,&quot;Company&quot;:null,&quot;ClientID&quot;:&quot;81130&quot;,&quot;CompanyID&quot;:null},{&quot;Name&quot;:&quot;Passenger Name&quot;,&quot;Email&quot;:&quot;passenger@iwayex.com&quot;,&quot;Phone&quot;:&quot;89529525554&quot;,&quot;Company&quot;:null,&quot;ClientID&quot;:&quot;45164&quot;,&quot;CompanyID&quot;:null}],&quot;PassengersNumber&quot;:2,&quot;Coordinator&quot;:{&quot;phone&quot;:null,&quot;name&quot;:null},&quot;SendEnglishSms&quot;:false,&quot;CustomerName&quot;:&quot;&quot;,&quot;CustomerEmail&quot;:&quot;&quot;,&quot;CustomerPhone&quot;:&quot;&quot;,&quot;Signature&quot;:&quot;67ADA73592690F5614A9B4FA170F24FA&quot;,&quot;CancellationTimeWithoutPenalty&quot;:&quot;2018-05-27T05:00:00+03:00&quot;,&quot;LinkChange&quot;:&quot;This type of reservation does not support a change in the personal office&quot;,&quot;DriverData&quot;:null,&quot;FinalCost&quot;:0,&quot;ProcessedTrip&quot;:0,&quot;CodeAuth&quot;:null,&quot;AgentCodeAuth&quot;:null,&quot;geoPathToken&quot;:null,&quot;DestinationAddressObject&quot;:{&quot;address&quot;:null,&quot;geoCheck&quot;:null,&quot;geoData&quot;:null},&quot;LocationAddressObject&quot;:{&quot;address&quot;:&quot;locationAddress-6&quot;,&quot;geoCheck&quot;:null,&quot;geoData&quot;:null},&quot;CarData&quot;:{&quot;CarClassID&quot;:&quot;2&quot;,&quot;CarClass&quot;:&quot;standard&quot;,&quot;Models&quot;:&quot;Skoda Octavia&quot;,&quot;Capacity&quot;:&quot;3&quot;},&quot;Platform&quot;:7,&quot;AdditionalAddress&quot;:false},&quot;id&quot;:1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPrice_Random" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetPrice&quot;,&#xd;
   &quot;params&quot;:{&#xd;
       &quot;userID&quot;:12184,&#xd;
       &quot;currency&quot;: &quot;${CURRENCY}&quot;,&#xd;
       &quot;lang&quot;: &quot;${LANGUAGE}&quot;,&#xd;
       &quot;startPlaceAuditID&quot;: ${StartID},&#xd;
       &quot;finishPlaceAuditID&quot;: ${FinishID}&#xd;
       },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPriceIATA_Random" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;GetPriceIATA&quot;,&#xd;
    &quot;params&quot;:{&#xd;
            &quot;IATA&quot;:&quot;${IATA}&quot;,&#xd;
            &quot;currency&quot;:&quot;${CURRENCY}&quot;,&#xd;
            &quot;lang&quot;: &quot;${LANGUAGE}&quot;&#xd;
  		   },&#xd;
&quot;id&quot;:1}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">100</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">IATA1</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckAllowedTimeOrder_Random" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;CheckAllowedTimeOrder&quot;,&quot;params&quot;:{&#xd;
  		&quot;priceAuditID&quot;: 6692&#xd;
  		},&#xd;
&quot;id&quot;:1}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="startTimeZoneCode_CheckAllowedTimeOrder" enabled="true">
            <stringProp name="VAR">startTimeZoneCode_CheckAllowedTimeOrder</stringProp>
            <stringProp name="JSONPATH">$..startTimeZoneCode</stringProp>
            <stringProp name="DEFAULT">startTimeZoneCode_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_UserID_ApproveTrip_1" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;startTimeZoneCode_CheckAllowedTimeOrder_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;+03:00&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAllowablePlacesTypes" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&#xd;
  		&quot;method&quot;:&quot;GetAllowablePlacesTypes&quot;, &#xd;
  		&quot;params&quot;:{&quot;lang&quot;:&quot;en&quot;},&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Title</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">Result[*].Title</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">Airport</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;Title&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;Airport&quot;){
		AssertionResult.setFailureMessage(&quot;The Title place is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="TextAssertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1392652001">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:[{&quot;AuditID&quot;:&quot;2&quot;,&quot;Title&quot;:&quot;Airport&quot;},{&quot;AuditID&quot;:&quot;1&quot;,&quot;Title&quot;:&quot;within city&quot;},{&quot;AuditID&quot;:&quot;4&quot;,&quot;Title&quot;:&quot;Near the city&quot;},{&quot;AuditID&quot;:&quot;3&quot;,&quot;Title&quot;:&quot;Railway Station&quot;},{&quot;AuditID&quot;:&quot;5&quot;,&quot;Title&quot;:&quot;Settlement&quot;},{&quot;AuditID&quot;:&quot;6&quot;,&quot;Title&quot;:&quot;Others&quot;},{&quot;AuditID&quot;:&quot;7&quot;,&quot;Title&quot;:&quot;MKAD&quot;},{&quot;AuditID&quot;:&quot;8&quot;,&quot;Title&quot;:&quot;KAD&quot;},{&quot;AuditID&quot;:&quot;9&quot;,&quot;Title&quot;:&quot;downtown&quot;},{&quot;AuditID&quot;:&quot;10&quot;,&quot;Title&quot;:&quot;Hotel&quot;}],&quot;id&quot;:1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">30</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BatchReservations_Random" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;BatchReservations&quot;,&quot;params&quot;:{&#xd;
	&quot;data&quot;:[&#xd;
  		{&#xd;
  			&quot;priceID&quot;:7228, &#xd;
  			&quot;dateArrival&quot;: &quot;2018-05-28 07:00&quot;,&#xd;
  			&quot;dateDeparture&quot;: &quot;2018-05-28 12:00&quot;, &#xd;
  			&quot;locationAddress&quot;:&quot;locationAddress-6&quot;, &#xd;
  			&quot;passengers&quot;:[&#xd;
  				{&#xd;
  					&quot;phone&quot;:&quot;89529525252&quot;, &#xd;
  					&quot;email&quot;:&quot;email@email.com&quot;, &#xd;
  					&quot;name&quot;:&quot;Name Name&quot;&#xd;
  				}, &#xd;
  				{&#xd;
  					&quot;phone&quot;:&quot;89529525252&quot;, &#xd;
  					&quot;email&quot;:&quot;email@email.com&quot;, &#xd;
  					&quot;name&quot;:&quot;Name Name&quot;&#xd;
  				}&#xd;
  			], &#xd;
  			&quot;userID&quot;:10452,&#xd;
  			&quot;arrivalNumber&quot;:&quot;arrivalNumber&quot;, &#xd;
  			&quot;lang&quot;:&quot;en&quot;, &#xd;
  			&quot;currency&quot;:&quot;EUR&quot;&#xd;
  		},&#xd;
  		{&#xd;
  			&quot;priceID&quot;:6942, &#xd;
  			&quot;dateArrival&quot;: &quot;2018-06-17 07:00&quot;, &#xd;
  			&quot;passengers&quot;:[&#xd;
  				{&#xd;
  					&quot;phone&quot;:&quot;89529525252&quot;, &#xd;
  					&quot;email&quot;:&quot;email@email.com&quot;, &#xd;
  					&quot;name&quot;:&quot;Name1234 Name&quot;&#xd;
  				}, &#xd;
  				{&#xd;
  					&quot;phone&quot;:&quot;89529525252&quot;, &#xd;
  					&quot;email&quot;:&quot;email@email.com&quot;, &#xd;
  					&quot;name&quot;:&quot;Name1234 Name&quot;&#xd;
  				}&#xd;
  			], &#xd;
  			&quot;userID&quot;:10452,&#xd;
  			&quot;arrivalNumber&quot;:&quot;arrivalNumber&quot;, &#xd;
  			&quot;destinationAddress&quot;:&quot;destinationAddress-6 &quot;, &#xd;
  			&quot;lang&quot;:&quot;en&quot;, &#xd;
  			&quot;currency&quot;:&quot;EUR&quot;&#xd;
  		}&#xd;
  	] &#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">StartTitle</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">Result[*].StartTitle</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">Ekaterinburg</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;StartTitle&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;Ekaterinburg&quot;){
		AssertionResult.setFailureMessage(&quot;The Place is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="TextAssertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-728744579">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:{&quot;Date&quot;:&quot;2018-01-15 10:26&quot;,&quot;DateChange&quot;:&quot;2018-01-15 10:26&quot;,&quot;DateResponse&quot;:null,&quot;DateArrival&quot;:&quot;2018-05-27 07:00&quot;,&quot;DateDeparture&quot;:&quot;2018-05-27 13:00&quot;,&quot;OrderID&quot;:20014854,&quot;PriceID&quot;:8327,&quot;UserID&quot;:1863,&quot;StartID&quot;:135,&quot;StartTitle&quot;:&quot;Moscow (MKAD)&quot;,&quot;FinishID&quot;:1200,&quot;FinishTitle&quot;:&quot;Belorussky Railway Station (Moscow)&quot;,&quot;OrderType&quot;:12,&quot;Transaction&quot;:437678111,&quot;PayableStatus&quot;:0,&quot;OrderStatus&quot;:0,&quot;ExOrderStatus&quot;:0,&quot;ServiceID&quot;:1,&quot;Duration&quot;:0,&quot;DoerCityID&quot;:4400,&quot;StartType&quot;:7,&quot;PlaceTypeStart&quot;:&quot;MKAD&quot;,&quot;FinishType&quot;:3,&quot;PlaceTypeFinish&quot;:&quot;Railway Station&quot;,&quot;AllowableTime&quot;:2,&quot;CancellationTime&quot;:2,&quot;CarClassID&quot;:2,&quot;CityStartID&quot;:4400,&quot;CityStart&quot;:&quot;Moscow&quot;,&quot;CityFinishID&quot;:4400,&quot;CityFinish&quot;:&quot;Moscow&quot;,&quot;Price&quot;:19,&quot;Value&quot;:70.89,&quot;Nominal&quot;:1,&quot;Reward&quot;:5,&quot;BookerNumber&quot;:&quot;C-827&quot;,&quot;Currency&quot;:&quot;EUR&quot;,&quot;ArrivalNumber&quot;:&quot;&quot;,&quot;DepartureNumber&quot;:&quot;Moscow-Berlin&quot;,&quot;Table&quot;:&quot;Client Name|Passenger Name&quot;,&quot;Notes&quot;:&quot;&quot;,&quot;InternalNumber&quot;:&quot;&quot;,&quot;UserIP&quot;:&quot;&quot;,&quot;StartTimeZoneCode&quot;:&quot;Europe\/Moscow&quot;,&quot;FinishTimeZoneCode&quot;:&quot;Europe\/Moscow&quot;,&quot;OffsetStartTimeZone&quot;:&quot;+3&quot;,&quot;OffsetFinishTimeZone&quot;:&quot;+3&quot;,&quot;LocationAddress&quot;:&quot;locationAddress-6&quot;,&quot;DestinationAddress&quot;:&quot;&quot;,&quot;Lang&quot;:&quot;en&quot;,&quot;NetWorth&quot;:0,&quot;Rate&quot;:0,&quot;DiscountValue&quot;:0,&quot;Discount&quot;:0,&quot;Threshold&quot;:0,&quot;AllowableSubaddress&quot;:3,&quot;CoefSubaddress&quot;:1,&quot;PriceSubaddress&quot;:9,&quot;Subaddress&quot;:[],&quot;NumberSubaddress&quot;:0,&quot;CarClass&quot;:&quot;standard&quot;,&quot;SendParams&quot;:{&quot;SendClientVoucher&quot;:true,&quot;SendAdminVoucher&quot;:true,&quot;SendClientDoc&quot;:false,&quot;SendAdminDoc&quot;:true},&quot;Passengers&quot;:[{&quot;Name&quot;:&quot;Client Name&quot;,&quot;Email&quot;:&quot;client@iwayex.com&quot;,&quot;Phone&quot;:&quot;89529525555&quot;,&quot;Company&quot;:null,&quot;ClientID&quot;:&quot;81130&quot;,&quot;CompanyID&quot;:null},{&quot;Name&quot;:&quot;Passenger Name&quot;,&quot;Email&quot;:&quot;passenger@iwayex.com&quot;,&quot;Phone&quot;:&quot;89529525554&quot;,&quot;Company&quot;:null,&quot;ClientID&quot;:&quot;45164&quot;,&quot;CompanyID&quot;:null}],&quot;PassengersNumber&quot;:2,&quot;Coordinator&quot;:{&quot;phone&quot;:null,&quot;name&quot;:null},&quot;SendEnglishSms&quot;:false,&quot;CustomerName&quot;:&quot;&quot;,&quot;CustomerEmail&quot;:&quot;&quot;,&quot;CustomerPhone&quot;:&quot;&quot;,&quot;Signature&quot;:&quot;67ADA73592690F5614A9B4FA170F24FA&quot;,&quot;CancellationTimeWithoutPenalty&quot;:&quot;2018-05-27T05:00:00+03:00&quot;,&quot;LinkChange&quot;:&quot;This type of reservation does not support a change in the personal office&quot;,&quot;DriverData&quot;:null,&quot;FinalCost&quot;:0,&quot;ProcessedTrip&quot;:0,&quot;CodeAuth&quot;:null,&quot;AgentCodeAuth&quot;:null,&quot;geoPathToken&quot;:null,&quot;DestinationAddressObject&quot;:{&quot;address&quot;:null,&quot;geoCheck&quot;:null,&quot;geoData&quot;:null},&quot;LocationAddressObject&quot;:{&quot;address&quot;:&quot;locationAddress-6&quot;,&quot;geoCheck&quot;:null,&quot;geoData&quot;:null},&quot;CarData&quot;:{&quot;CarClassID&quot;:&quot;2&quot;,&quot;CarClass&quot;:&quot;standard&quot;,&quot;Models&quot;:&quot;Skoda Octavia&quot;,&quot;Capacity&quot;:&quot;3&quot;},&quot;Platform&quot;:7,&quot;AdditionalAddress&quot;:false},&quot;id&quot;:1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ApproveTrip" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;ApproveTrip&quot;,&quot;params&quot;:{&#xd;
  	&quot;userID&quot;:12184,&#xd;
  	&quot;password&quot;:&quot;idu183&quot;,&#xd;
	&quot;transaction&quot;:717572816&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">message</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">Result[*].message</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">Internal error</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;message&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	

	if (	jsonString != &quot;Internal error&quot;){
		AssertionResult.setFailureMessage(&quot;The Place is wrong&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="TextAssertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="892726263">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;error&quot;:{&quot;code&quot;:5613,&quot;message&quot;:&quot;Internal error&quot;,&quot;data&quot;:&quot;\u041f\u043e\u0435\u0437\u0434\u043a\u0438 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c \u00abTransaction\u00bb 717572816 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u00abUserID\u00bb 12184 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b.&quot;},&quot;id&quot;:1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">30</stringProp>
        </ConstantTimer>
        <hashTree/>
        <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
          <stringProp name="ProxyControlGui.port">8888</stringProp>
          <collectionProp name="ProxyControlGui.exclude_list"/>
          <collectionProp name="ProxyControlGui.include_list"/>
          <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
          <intProp name="ProxyControlGui.grouping_mode">0</intProp>
          <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
          <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
          <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
          <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
          <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
          <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
          <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
          <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
          <boolProp name="ProxyControlGui.notify_child_sl_filtered">true</boolProp>
          <boolProp name="ProxyControlGui.regex_match">false</boolProp>
          <stringProp name="ProxyControlGui.content_type_include"></stringProp>
          <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
          <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        </ProxyControl>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="WorkBench Test Fragment" enabled="false"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateDateResponse" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;UpdateDateResponse&quot;,&quot;params&quot;:{&#xd;
      &quot;userID&quot;:12184,&#xd;
      &quot;password&quot;:&quot;idu183&quot;,&#xd;
      &quot;orderIDs&quot;:${OrderID_GetTrip}&#xd;
  },&#xd;
&quot;id&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rpc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ApiCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Title_GetCountries" enabled="false">
            <stringProp name="VAR">Title_GetCountries</stringProp>
            <stringProp name="JSONPATH">$..Title</stringProp>
            <stringProp name="DEFAULT">Title_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_Title_GetCountries" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String jsonString =  vars.get(&quot;AuditID_GetPlaceFromPlace_1&quot;);
//String jsonString1 =  vars.get(&quot;Title_GetCountries_1&quot;);

log.info (&quot;The example answer is &quot; + jsonString);	
//log.info (&quot;The example answer is &quot; + jsonString1);	


	if 	(jsonString != &quot;8152&quot;){
		AssertionResult.setFailureMessage(&quot;Method does not work&quot;);
	    	AssertionResult.setFailure(true); 
	}
	
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="AuditID_GetPlaceFromPlace" enabled="true">
            <stringProp name="VAR">AuditID_GetPlaceFromPlace</stringProp>
            <stringProp name="JSONPATH">$..AuditID</stringProp>
            <stringProp name="DEFAULT">AuditID_GetPlaceFromPlace_not_found</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug " enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
